#include <SDL3/SDL.h>

// using callbacks: https://wiki.libsdl.org/SDL3/README-main-functions
#define SDL_MAIN_USE_CALLBACKS
#include <SDL3/SDL_main.h>
#include <SDL3_mixer/SDL_mixer.h>
#include <SDL3_ttf/SDL_ttf.h>
#include <Timing_controller.h>

#include <filesystem>
#include <fstream>
#include <string>
#include <vector>

const std::string g_app_name{"lander"};
constexpr int g_window_start_width{400};
constexpr int g_window_start_height{400};

// Think i want to separate my app from my game
// so have an app context here, that setups up minimally what we need?
// then a game context with everything else
// the main SDL functions here will mostly just call game functions?
//

/*
https://hamdy-elzanqali.medium.com/let-there-be-triangles-sdl-gpu-edition-bd82cf2ef615

What is SDL GPU all about?
To draw to the screen you need to talk to the GPU, to do that you need a graphics API.
OpenGL is getting too old, and replaced by modern APIs
    Faster, newer features, better designed, better supported
Vulkan - most of Linux and Android
Directx12 - mostly windows
Metal - macOS and iOS required
It gets to be too much to learn and use
SDL_gpu is a wrapper for using all of these APIs with minimal effort

Overview
The flow will be something like this:
1. Create a device - requesting access to a compatible GPU
2. Create buffers - containers of data on the GPU
3. Crate a Graphics Pipeline - tells the GPU how to use these buffers
4. Acquire a Command Buffer - used to issue tasks to the GPU
5. Fill the buffers with data using Transfer Buffer in a Copy Pass
6. Acquire the Swapchain texture - a texture of a window to draw onto
7. Issue the Draw Call in a Render Pass

*/

struct App_context {
    SDL_Window* window;
    SDL_GPUDevice* gpu_device;
    // SDL_GPUGraphicsPipeline* gfx_pipeline;
    // SDL_Renderer* renderer;
    SDL_AudioDeviceID audio_device;
    // TTF_TextEngine* text_engine;
    TTF_Font* font;
    Mix_Chunk* sfx;    // want an array/vec/hash something of these instead?
    Timing_controller timer;

    SDL_AppResult app_quit;

    // int virtual_width;
    // int virtual_height;
};

auto SDL_Fail(const std::string& msg = "") -> SDL_AppResult {
    SDL_LogError(
        SDL_LOG_CATEGORY_CUSTOM, std::format("{}\nError: {}", msg, SDL_GetError()).c_str()
    );
    // SDL_LogError(SDL_LOG_CATEGORY_CUSTOM, "Error %s", SDL_GetError());
    return SDL_APP_FAILURE;
}

auto gpu_demo() -> void {
}

// Runs once at startup
auto SDL_AppInit(void** appstate, int argc, char* argv[]) -> SDL_AppResult {
    // can SDL_SetAppMetadata()...

    if (not SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO))
        return SDL_Fail();

    float scale{SDL_GetDisplayContentScale(SDL_GetPrimaryDisplay())};
    SDL_Window* window{SDL_CreateWindow(
        g_app_name.c_str(), static_cast<int>(g_window_start_width * scale),
        static_cast<int>(g_window_start_height * scale),
        SDL_WINDOW_RESIZABLE | SDL_WINDOW_HIGH_PIXEL_DENSITY
    )};
    if (not window)
        return SDL_Fail();

    //
    // GPU

    /* You specify the shader formats you plan to provide
     * (it will need shaders for each backend)
     * The official approach to support every backend is either using only .spv,
     * or .hlsl and using SDL_shadercross to convert your shaders on the fly or as a build step
     * You can enable a debugging layer, you need to have installed the SDKs to get
     * their error messages or their validation layers
     * You can supply the name of hte driver you want to use
     * (vulkan, metal, direct3d12, or NULL - SDL handles it automatically)
     * If no device could be created for the given parameters, the function will return NULL
     */
    SDL_GPUDevice* gpu_device{SDL_CreateGPUDevice(SDL_GPU_SHADERFORMAT_SPIRV, true, nullptr)};
    if (not gpu_device)
        return SDL_Fail();

    // Once you have a device ready you tell SDL to use it in a specific window
    if (not SDL_ClaimWindowForGPUDevice(gpu_device, window))
        return SDL_Fail();

    // GPU
    //

    // SDL_Renderer* renderer{SDL_CreateRenderer(window, nullptr)};
    // if (renderer == nullptr)
    //     return SDL_Fail();
    //
    // if (not SDL_SetRenderLogicalPresentation(
    //         renderer, g_window_start_width, g_window_start_height,
    //         SDL_LOGICAL_PRESENTATION_LETTERBOX
    //     ))
    //     return SDL_Fail();
    //
    // if (not SDL_SetRenderVSync(renderer, 1))
    //     return SDL_Fail();
    //
    // if (not SDL_SetDefaultTextureScaleMode(renderer, SDL_SCALEMODE_NEAREST))
    //     return SDL_Fail();

    if (not TTF_Init())
        return SDL_Fail();

    // TTF_TextEngine* text_engine{TTF_CreateRendererTextEngine(renderer)};
    // if (text_engine == nullptr)
    //     return SDL_Fail();

    SDL_AudioDeviceID audio_device{SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, nullptr)};
    if (audio_device == 0)
        return SDL_Fail();

    if (not Mix_OpenAudio(audio_device, nullptr))
        return SDL_Fail();

    // load media, basepath, any other non init setup here
    const std::filesystem::path base_path{SDL_GetBasePath()};
    const std::filesystem::path font_path{"assets\\font"};
    const std::filesystem::path audio_path{"assets\\audio"};

    const std::filesystem::path font_file_path{base_path / font_path / "pong_font.ttf"};
    TTF_Font* font{TTF_OpenFont(font_file_path.string().c_str(), 32)};
    if (font == nullptr)
        return SDL_Fail();

    const std::filesystem::path sfx_clear_file_path{base_path / audio_path / "clear.wav"};
    Mix_Chunk* sfx_clear{Mix_LoadWAV(sfx_clear_file_path.string().c_str())};
    if (sfx_clear == nullptr)
        return SDL_Fail();

    *appstate = new App_context{
        .window = window,
        .gpu_device = gpu_device,
        // .gfx_pipeline = gfx_pipeline,
        // .renderer = renderer,
        .audio_device = audio_device,
        // .text_engine = text_engine,
        .font = font,
        .sfx = sfx_clear,
        .timer = {},
        .app_quit = SDL_APP_CONTINUE
    };

    SDL_Log("App started successfully!");
    return SDL_APP_CONTINUE;
}

// Runs when a new event occurs
auto SDL_AppEvent(void* appstate, SDL_Event* event) -> SDL_AppResult {
    auto* app{static_cast<App_context*>(appstate)};

    if (event->type == SDL_EVENT_QUIT)
        app->app_quit = SDL_APP_SUCCESS;

    return SDL_APP_CONTINUE;
}

// Runs once per frame
auto SDL_AppIterate(void* appstate) -> SDL_AppResult {
    auto* app{static_cast<App_context*>(appstate)};

    app->timer.tick();
    // process input
    // update
    // while timer should sim

    //
    // GPU

    /* What are command buffers?
     * A buffer is simply a container of data
     * it can be an array of positions, colors, etc
     * A command buffer is simply a 'buffer' or an array of 'commands',
     * it is a list of tasks you expect the GPU to execute in order
     * it is more efficient to pack up and send a set of commands rather than
     * sending one and waiting on its result then sending another
     * Command buffers also allow for multithreading, so you can split different
     * tasks like updating a buffers data on a thread and drawing geometry on another
     * For each command buffer you create, you must submit it when you are done with it
     * If you do not, you end up with memory leaks
     * Once submitted, the GPU will start to executing your instructions
     */
    SDL_GPUCommandBuffer* command_buffer{SDL_AcquireGPUCommandBuffer(app->gpu_device)};
    if (command_buffer) {

        /* The window's swapchain texture
         * A texture is a lot like a buffer, it is just a container
         * it contains the image pixel data in a certain format
         * A swapchain is a collection of textures that are 'swapped' on the window surface
         * one after the other
         * This means you can be updating a frame while the previous is being displayed to a screen,
         * and when the new frame is ready you swap it out with the old one
         * Use SDL_WaitAndAcquireGPUSwapchainTexture to acquire and fill the swapchain texture
         * with a texture and update a width and height variable
         * these variables are more reliable than just using the window size and may be useful later
         * Note we do not use SDL_AcquireGPUSwapchainTexture, if not used correctly on some backends
         * this can result in memory leaks, it also essentially blocks the thread until a swapchain
         * texture is available
         * Finally, the swapchain texture returned can be NULL in some situations
         * (like the window being minimized) so you must always check before using it
         */

        SDL_GPUTexture* swapchain_texture;
        Uint32 width;
        Uint32 height;
        if (SDL_WaitAndAcquireGPUSwapchainTexture(
                command_buffer, app->window, &swapchain_texture, &width, &height
            )) {

            /* Color Targets
             * When you want to draw anything, you first need to give the GPU some info
             * where to draw, what to do with the previous targets content,
             * and how to deal with the new data
             * Here we want to clear the window with a color then store the resulting pixels
             * Another example may be updating an offscreen texture without clearing the previous
             * content Use a SDL_GPUColorTargetInfo struct to describe how the GPU should start a
             * Render Pass there are many properties, for simplicity we just use a few here
             */

            // discard previous content and clear to a color
            SDL_GPUColorTargetInfo color_target_info{};
            color_target_info.clear_color = {
                255 / 255.0F, 219 / 255.0F, 187 / 255.0F, 255 / 255.0F
            };
            color_target_info.load_op =
                SDL_GPU_LOADOP_CLEAR;    // or SDL_GPU_LOADOP_LOAD to use previous

            // store the content to the texture
            color_target_info.store_op = SDL_GPU_STOREOP_STORE;

            // where do we store the result?
            color_target_info.texture = swapchain_texture;

            /* Render Passes
             * A command buffer consists of passes
             * These passes can be a Copy Pass where you upload data to the GPU
             * (like updating a buffer or uploading a texture)
             * A Render Pass where you actually draw something onto a color target
             * Or a Compute Pass where you can pass heavy calculations to be done using compute
             * shaders To use a pass, you first 'begin' the pass, do your thing, then 'end' it You
             * cannot be 'inside' two passes at the same time, so if you begin one, you must first
             * end it before you can begin another The render pass will be where all of our draw
             * commands go, and it requires a color target
             * The second parameter is an array of the SDL_GPUColorTargetInfo structs
             * this lets you render to multiple color targets at the same time
             * using our single SDL_GPUColorTargetInfo as a pointer makes it treated as
             * the only element of an array
             * The third parameter is where we specify the size of the previous array
             * The last parameter is useful in the context of 3d applications
             */

            // begin the render pass
            SDL_GPURenderPass* render_pass{
                SDL_BeginGPURenderPass(command_buffer, &color_target_info, 1, nullptr)
            };

            // draw something here

            // end the render pass
            SDL_EndGPURenderPass(render_pass);
        }
    }

    // do i want to fail it here? no right...
    // except you always need to submit the buffer, so maybe it would be good to fail if not work
    if (not SDL_SubmitGPUCommandBuffer(command_buffer))
        return SDL_Fail();

    // GPU
    //

    if (app->timer.should_render()) {
        double alpha{app->timer.interpolation_alpha()};
        // State state = currentstate * alpha + prevstate * (1.0 - alpha);
        // render();

        //
        // DEBUG/TESTING //
        // SDL_SetRenderDrawColor(app->renderer, 40, 45, 52, 255);
        // SDL_RenderClear(app->renderer);
        //
        // TTF_Text* text{TTF_CreateText(app->text_engine, app->font, "hello world", 0)};
        // // app->text_engine->CreateText(void, text);
        // TTF_DrawRendererText(text, 20, 20);
        //
        // TTF_Text* text2{TTF_CreateText(app->text_engine, app->font, "goodbye world", 0)};
        // TTF_SetTextColor(text2, 120, 120, 0, 255);
        // // TTF_SetTextFont()
        // TTF_DrawRendererText(text2, 100, 100);
        //
        // app->timer.display_debug(app->renderer);
        //
        // SDL_RenderPresent(app->renderer);
        // DEBUG/TESTING //
        //

        app->timer.mark_render();
    }

    app->timer.wait_for_next();
    return app->app_quit;
}

// Runs once at shutdown
auto SDL_AppQuit(void* appstate, SDL_AppResult result) -> void {
    if (auto* app{static_cast<App_context*>(appstate)}; app) {
        Mix_FreeChunk(app->sfx);
        app->sfx = nullptr;

        TTF_CloseFont(app->font);
        app->font = nullptr;

        //
        // GPU

        SDL_DestroyGPUDevice(app->gpu_device);

        // GPU
        //

        // SDL_DestroyRenderer(app->renderer);
        // app->renderer = nullptr;
        SDL_DestroyWindow(app->window);
        app->window = nullptr;

        delete app;
    }

    Mix_Quit();
    TTF_Quit();
    SDL_Log("App quit successfully!");
    SDL_Quit();
}

// auto main(int argc, char* args[]) -> int {
//     int exit_code{};
//
//     // Game game;
//     // if (!game.initialize())
//     //     exit_code = 1;
//     //
//     // if (!game.setup())
//     //     exit_code = 2;
//     //
//     // if (exit_code == 0)
//     //     game.run();
//     //
//     // game.quit();
//
//     return exit_code;
// }

/*
Absolutely! Here's a **structured and minimal design** to get your **Lunar Lander** project off the
ground — no pun intended. We'll walk through:

1. 🧱 **Core system breakdown**
2. 📦 **Suggested class layout**
3. 🧪 **Build order (development plan)**
4. 🎯 **MVP milestone goals**

---

## 🧱 1. Core System Breakdown

| System     | Responsibilities                                              |
| ---------- | ------------------------------------------------------------- |
| `Lander`   | Simulates physics: position, rotation, velocity, thrust, fuel |
| `Terrain`  | Holds terrain geometry (lines), handles collision             |
| `Game`     | Orchestrates game loop, state transitions, input, HUD         |
| `Renderer` | Renders lander, terrain, thrust, and HUD                      |

---

## 📦 2. Suggested Class Skeletons

### `Lander` class

```cpp
class Lander {
public:
    void update(double dt);           // Physics integration
    void apply_thrust();              // Accelerate upward
    void rotate_left();
    void rotate_right();

    void reset();                     // Respawn/prepare for new round

    SDL_FPoint position() const;
    SDL_FPoint velocity() const;
    double angle() const;
    double fuel() const;

    bool out_of_fuel() const;
    bool thrusting() const;

private:
    SDL_FPoint pos{};
    SDL_FPoint vel{};
    double ang_rad{0.0};              // Facing direction
    double angular_vel{0.0};
    double fuel_amount{100.0};

    bool is_thrusting{false};
};
```

---

### `Terrain` class

```cpp
struct LineSegment {
    SDL_FPoint p1;
    SDL_FPoint p2;
    bool is_landing_zone{false};
};

class Terrain {
public:
    void generate();                                // Or load hardcoded points
    void render(SDL_Renderer* renderer) const;

    const std::vector<LineSegment>& segments() const;
    std::optional<LineSegment> collision_with(const SDL_FPoint& pos) const;

private:
    std::vector<LineSegment> lines;
};
```

---

### `Game` class

```cpp
enum class GameState {
    Playing,
    Crashed,
    Landed,
    OutOfFuel,
    GameOver
};

class Game {
public:
    void run();               // main loop

private:
    void handle_input();
    void update(double dt);
    void render();

    void check_collisions();
    void reset_game();

    Lander lander;
    Terrain terrain;
    GameState state{GameState::Playing};

    SDL_Renderer* renderer{};
};
```

---

## 🧪 3. Recommended Build Order

Start with a simple development spiral — each step gives you something testable:

### ✅ Step 1: Build physics and lander controls

* Display the lander as a triangle
* Apply gravity
* Rotate and thrust
* Move with velocity

### ✅ Step 2: Add static terrain

* Render a flat or bumpy surface
* No collision yet

### ✅ Step 3: Collision detection

* Test if lander "touches" terrain
* Mark crash/land if certain conditions met

### ✅ Step 4: Add fuel and HUD

* Fuel drains when thrusting
* Show simple text/fuel bar

### ✅ Step 5: Game states & reset

* Display messages: "Landed!", "Crashed!", etc.
* Allow restart via keypress

---

## 🎯 4. MVP Milestone Goals

You’re done with your MVP when you can:

* [x] Rotate, thrust, and fall with momentum
* [x] Land softly or crash based on physics
* [x] Run out of fuel if used poorly
* [x] See basic HUD and win/lose states
* [x] Restart the game without quitting

---

## 🧠 Tips and Design Notes

* Use `float` or `double` for all simulation — SDL integers for rendering only.
* Treat your simulation as "meters" and scale it visually (e.g. 1 meter = 20 pixels).
* Physics doesn’t need to be super precise — you’re making a game, not a sim!
* If you're unsure about units, define constants like:

  ```cpp
  constexpr float gravity = 9.8f;
  constexpr float thrust_force = 15.0f;
  constexpr float pixel_scale = 20.0f;
  ```

---
 */
